"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DashboardSidebarSubNavigation = DashboardSidebarSubNavigation;
var React = _interopRequireWildcard(require("react"));
var _material = require("@mui/material");
var _Avatar = _interopRequireDefault(require("@mui/material/Avatar"));
var _Box = _interopRequireDefault(require("@mui/material/Box"));
var _Collapse = _interopRequireDefault(require("@mui/material/Collapse"));
var _Divider = _interopRequireDefault(require("@mui/material/Divider"));
var _Grow = _interopRequireDefault(require("@mui/material/Grow"));
var _List = _interopRequireDefault(require("@mui/material/List"));
var _ListItem = _interopRequireDefault(require("@mui/material/ListItem"));
var _ListItemButton = _interopRequireDefault(require("@mui/material/ListItemButton"));
var _ListItemIcon = _interopRequireDefault(require("@mui/material/ListItemIcon"));
var _ListItemText = _interopRequireDefault(require("@mui/material/ListItemText"));
var _ListSubheader = _interopRequireDefault(require("@mui/material/ListSubheader"));
var _Paper = _interopRequireDefault(require("@mui/material/Paper"));
var _Typography = _interopRequireDefault(require("@mui/material/Typography"));
var _ExpandMore = _interopRequireDefault(require("@mui/icons-material/ExpandMore"));
var _Link = require("../shared/Link");
var _context = require("../shared/context");
var _navigation = require("../shared/navigation");
var _utils = require("./utils");
var _shared = require("./shared");
var _useActivePage = require("../useActivePage");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const NavigationListItemButton = (0, _material.styled)(_ListItemButton.default)(({
  theme
}) => ({
  borderRadius: 8,
  '&.Mui-selected': {
    '& .MuiListItemIcon-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiTypography-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiSvgIcon-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiAvatar-root': {
      backgroundColor: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiTouchRipple-child': {
      backgroundColor: (theme.vars ?? theme).palette.primary.dark
    }
  },
  '& .MuiSvgIcon-root': {
    color: (theme.vars ?? theme).palette.action.active
  },
  '& .MuiAvatar-root': {
    backgroundColor: (theme.vars ?? theme).palette.action.active
  }
}));
/**
 * @ignore - internal component.
 */
function DashboardSidebarSubNavigation({
  subNavigation,
  depth = 0,
  onLinkClick,
  isMini = false,
  isPopover = false,
  isFullyExpanded = true,
  isFullyCollapsed = false,
  hasDrawerTransitions = false
}) {
  const navigationContext = React.useContext(_context.NavigationContext);
  const activePage = (0, _useActivePage.useActivePage)();
  const initialExpandedSidebarItemIds = React.useMemo(() => subNavigation.map((navigationItem, navigationItemIndex) => ({
    navigationItem,
    originalIndex: navigationItemIndex
  })).filter(({
    navigationItem
  }) => (0, _navigation.isPageItem)(navigationItem) && !!activePage && (0, _navigation.hasSelectedNavigationChildren)(navigationContext, navigationItem, activePage.path)).map(({
    originalIndex
  }) => `${depth}-${originalIndex}`), [activePage, depth, navigationContext, subNavigation]);
  const [expandedSidebarItemIds, setExpandedSidebarItemIds] = React.useState(initialExpandedSidebarItemIds);
  const [hoveredMiniSidebarItemId, setHoveredMiniSidebarItemId] = React.useState(null);
  const handleOpenFolderClick = React.useCallback(itemId => () => {
    setExpandedSidebarItemIds(previousValue => previousValue.includes(itemId) ? previousValue.filter(previousValueItemId => previousValueItemId !== itemId) : [...previousValue, itemId]);
  }, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_List.default, {
    sx: {
      padding: 0,
      mt: isPopover && depth === 1 ? 0.5 : 0,
      mb: depth === 0 && !isPopover ? 4 : 0.5,
      pl: (isPopover ? 1 : 2) * (isPopover ? depth - 1 : depth),
      minWidth: isPopover && depth === 1 ? 240 : 'auto'
    },
    children: subNavigation.map((navigationItem, navigationItemIndex) => {
      if (navigationItem.kind === 'header') {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListSubheader.default, {
          sx: {
            fontSize: 12,
            fontWeight: '700',
            height: isMini ? 0 : 40,
            ...(hasDrawerTransitions ? (0, _utils.getDrawerSxTransitionMixin)(isFullyExpanded, 'height') : {}),
            px: 2,
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap',
            zIndex: 2
          },
          children: (0, _navigation.getItemTitle)(navigationItem)
        }, `subheader-${depth}-${navigationItemIndex}`);
      }
      if (navigationItem.kind === 'divider') {
        const nextItem = subNavigation[navigationItemIndex + 1];
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("li", {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Divider.default, {
            sx: {
              borderBottomWidth: 2,
              mx: 1,
              mt: 1,
              mb: nextItem?.kind === 'header' && !isMini ? 0 : 1,
              ...(hasDrawerTransitions ? (0, _utils.getDrawerSxTransitionMixin)(isFullyExpanded, 'margin') : {})
            }
          })
        }, `divider-${depth}-${navigationItemIndex}`);
      }
      const navigationItemFullPath = (0, _navigation.getItemPath)(navigationContext, navigationItem);
      const navigationItemId = `${depth}-${navigationItemIndex}`;
      const navigationItemTitle = (0, _navigation.getItemTitle)(navigationItem);
      const isNestedNavigationExpanded = expandedSidebarItemIds.includes(navigationItemId);
      const listItemIconSize = 34;
      const isActive = !!activePage && activePage.path === (0, _navigation.getItemPath)(navigationContext, navigationItem);
      let nestedNavigationCollapseSx = {
        display: 'none'
      };
      if (isMini && isFullyCollapsed) {
        nestedNavigationCollapseSx = {
          fontSize: 18,
          position: 'absolute',
          top: '41.5%',
          right: '2px',
          transform: 'translateY(-50%) rotate(-90deg)'
        };
      } else if (!isMini && isFullyExpanded) {
        nestedNavigationCollapseSx = {
          ml: 0.5,
          transform: `rotate(${isNestedNavigationExpanded ? 0 : -90}deg)`,
          transition: theme => theme.transitions.create('transform', {
            easing: theme.transitions.easing.sharp,
            duration: 100
          })
        };
      }

      // Show as selected in mini sidebar if any of the children matches path, otherwise show as selected if item matches path
      const isSelected = activePage && navigationItem.children && isMini ? (0, _navigation.hasSelectedNavigationChildren)(navigationContext, navigationItem, activePage.path) : isActive && !navigationItem.children;
      const listItem = /*#__PURE__*/(0, _jsxRuntime.jsxs)(_ListItem.default, {
        ...(navigationItem.children && isMini ? {
          onMouseEnter: () => {
            setHoveredMiniSidebarItemId(navigationItemId);
          },
          onMouseLeave: () => {
            setHoveredMiniSidebarItemId(null);
          }
        } : {}),
        sx: {
          py: 0,
          px: 1,
          overflowX: 'hidden'
        },
        children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(NavigationListItemButton, {
          selected: isSelected,
          sx: {
            px: 1.4,
            height: isMini ? 60 : 48
          },
          ...(navigationItem.children && !isMini ? {
            onClick: handleOpenFolderClick(navigationItemId)
          } : {}),
          ...(!navigationItem.children ? {
            LinkComponent: _Link.Link,
            href: navigationItemFullPath,
            onClick: onLinkClick
          } : {}),
          children: [navigationItem.icon || isMini ? /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Box.default, {
            sx: {
              position: 'relative',
              top: isMini ? -6 : 0,
              left: isMini ? 5 : 0
            },
            children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_ListItemIcon.default, {
              sx: {
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                minWidth: listItemIconSize
              },
              children: [navigationItem.icon ?? null, !navigationItem.icon && isMini ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Avatar.default, {
                sx: {
                  width: listItemIconSize - 7,
                  height: listItemIconSize - 7,
                  fontSize: 12,
                  ml: '-2px'
                },
                children: navigationItemTitle.split(' ').slice(0, 2).map(itemTitleWord => itemTitleWord.charAt(0).toUpperCase())
              }) : null]
            }), isMini ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Typography.default, {
              variant: "caption",
              sx: {
                position: 'absolute',
                bottom: -18,
                left: '50%',
                transform: 'translateX(-50%)',
                fontSize: 10,
                fontWeight: 500,
                textAlign: 'center',
                whiteSpace: 'nowrap',
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                width: _shared.MINI_DRAWER_WIDTH - 28
              },
              children: navigationItemTitle
            }) : null]
          }) : null, !isMini ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListItemText.default, {
            primary: navigationItemTitle,
            sx: {
              ml: 1.2,
              whiteSpace: 'nowrap',
              zIndex: 1
            }
          }) : null, navigationItem.action && !isMini && isFullyExpanded ? navigationItem.action : null, navigationItem.children ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_ExpandMore.default, {
            sx: nestedNavigationCollapseSx
          }) : null]
        }), navigationItem.children && isMini ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Grow.default, {
          in: navigationItemId === hoveredMiniSidebarItemId,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Box.default, {
            sx: {
              position: 'fixed',
              left: _shared.MINI_DRAWER_WIDTH - 2,
              pl: '6px'
            },
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Paper.default, {
              sx: {
                pt: 0.5,
                pb: 0.5,
                transform: 'translateY(calc(50% - 30px))'
              },
              children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DashboardSidebarSubNavigation, {
                subNavigation: navigationItem.children,
                depth: depth + 1,
                onLinkClick: onLinkClick,
                isPopover: true
              })
            })
          })
        }) : null]
      });
      return /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {
        children: [listItem, navigationItem.children && !isMini ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_Collapse.default, {
          in: isNestedNavigationExpanded,
          timeout: "auto",
          unmountOnExit: true,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DashboardSidebarSubNavigation, {
            subNavigation: navigationItem.children,
            depth: depth + 1,
            onLinkClick: onLinkClick,
            isPopover: isPopover
          })
        }) : null]
      }, navigationItemId);
    })
  });
}