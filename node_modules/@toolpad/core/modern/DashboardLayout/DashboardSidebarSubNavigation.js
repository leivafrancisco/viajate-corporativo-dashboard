'use client';

import * as React from 'react';
import { styled } from '@mui/material';
import Avatar from '@mui/material/Avatar';
import Box from '@mui/material/Box';
import Collapse from '@mui/material/Collapse';
import Divider from '@mui/material/Divider';
import Grow from '@mui/material/Grow';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import ListSubheader from '@mui/material/ListSubheader';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { Link } from "../shared/Link.js";
import { NavigationContext } from "../shared/context.js";
import { getItemPath, getItemTitle, hasSelectedNavigationChildren, isPageItem } from "../shared/navigation.js";
import { getDrawerSxTransitionMixin } from "./utils.js";
import { MINI_DRAWER_WIDTH } from "./shared.js";
import { useActivePage } from "../useActivePage/index.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
const NavigationListItemButton = styled(ListItemButton)(({
  theme
}) => ({
  borderRadius: 8,
  '&.Mui-selected': {
    '& .MuiListItemIcon-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiTypography-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiSvgIcon-root': {
      color: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiAvatar-root': {
      backgroundColor: (theme.vars ?? theme).palette.primary.dark
    },
    '& .MuiTouchRipple-child': {
      backgroundColor: (theme.vars ?? theme).palette.primary.dark
    }
  },
  '& .MuiSvgIcon-root': {
    color: (theme.vars ?? theme).palette.action.active
  },
  '& .MuiAvatar-root': {
    backgroundColor: (theme.vars ?? theme).palette.action.active
  }
}));
/**
 * @ignore - internal component.
 */
function DashboardSidebarSubNavigation({
  subNavigation,
  depth = 0,
  onLinkClick,
  isMini = false,
  isPopover = false,
  isFullyExpanded = true,
  isFullyCollapsed = false,
  hasDrawerTransitions = false
}) {
  const navigationContext = React.useContext(NavigationContext);
  const activePage = useActivePage();
  const initialExpandedSidebarItemIds = React.useMemo(() => subNavigation.map((navigationItem, navigationItemIndex) => ({
    navigationItem,
    originalIndex: navigationItemIndex
  })).filter(({
    navigationItem
  }) => isPageItem(navigationItem) && !!activePage && hasSelectedNavigationChildren(navigationContext, navigationItem, activePage.path)).map(({
    originalIndex
  }) => `${depth}-${originalIndex}`), [activePage, depth, navigationContext, subNavigation]);
  const [expandedSidebarItemIds, setExpandedSidebarItemIds] = React.useState(initialExpandedSidebarItemIds);
  const [hoveredMiniSidebarItemId, setHoveredMiniSidebarItemId] = React.useState(null);
  const handleOpenFolderClick = React.useCallback(itemId => () => {
    setExpandedSidebarItemIds(previousValue => previousValue.includes(itemId) ? previousValue.filter(previousValueItemId => previousValueItemId !== itemId) : [...previousValue, itemId]);
  }, []);
  return /*#__PURE__*/_jsx(List, {
    sx: {
      padding: 0,
      mt: isPopover && depth === 1 ? 0.5 : 0,
      mb: depth === 0 && !isPopover ? 4 : 0.5,
      pl: (isPopover ? 1 : 2) * (isPopover ? depth - 1 : depth),
      minWidth: isPopover && depth === 1 ? 240 : 'auto'
    },
    children: subNavigation.map((navigationItem, navigationItemIndex) => {
      if (navigationItem.kind === 'header') {
        return /*#__PURE__*/_jsx(ListSubheader, {
          sx: {
            fontSize: 12,
            fontWeight: '700',
            height: isMini ? 0 : 40,
            ...(hasDrawerTransitions ? getDrawerSxTransitionMixin(isFullyExpanded, 'height') : {}),
            px: 2,
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            whiteSpace: 'nowrap',
            zIndex: 2
          },
          children: getItemTitle(navigationItem)
        }, `subheader-${depth}-${navigationItemIndex}`);
      }
      if (navigationItem.kind === 'divider') {
        const nextItem = subNavigation[navigationItemIndex + 1];
        return /*#__PURE__*/_jsx("li", {
          children: /*#__PURE__*/_jsx(Divider, {
            sx: {
              borderBottomWidth: 2,
              mx: 1,
              mt: 1,
              mb: nextItem?.kind === 'header' && !isMini ? 0 : 1,
              ...(hasDrawerTransitions ? getDrawerSxTransitionMixin(isFullyExpanded, 'margin') : {})
            }
          })
        }, `divider-${depth}-${navigationItemIndex}`);
      }
      const navigationItemFullPath = getItemPath(navigationContext, navigationItem);
      const navigationItemId = `${depth}-${navigationItemIndex}`;
      const navigationItemTitle = getItemTitle(navigationItem);
      const isNestedNavigationExpanded = expandedSidebarItemIds.includes(navigationItemId);
      const listItemIconSize = 34;
      const isActive = !!activePage && activePage.path === getItemPath(navigationContext, navigationItem);
      let nestedNavigationCollapseSx = {
        display: 'none'
      };
      if (isMini && isFullyCollapsed) {
        nestedNavigationCollapseSx = {
          fontSize: 18,
          position: 'absolute',
          top: '41.5%',
          right: '2px',
          transform: 'translateY(-50%) rotate(-90deg)'
        };
      } else if (!isMini && isFullyExpanded) {
        nestedNavigationCollapseSx = {
          ml: 0.5,
          transform: `rotate(${isNestedNavigationExpanded ? 0 : -90}deg)`,
          transition: theme => theme.transitions.create('transform', {
            easing: theme.transitions.easing.sharp,
            duration: 100
          })
        };
      }

      // Show as selected in mini sidebar if any of the children matches path, otherwise show as selected if item matches path
      const isSelected = activePage && navigationItem.children && isMini ? hasSelectedNavigationChildren(navigationContext, navigationItem, activePage.path) : isActive && !navigationItem.children;
      const listItem = /*#__PURE__*/_jsxs(ListItem, {
        ...(navigationItem.children && isMini ? {
          onMouseEnter: () => {
            setHoveredMiniSidebarItemId(navigationItemId);
          },
          onMouseLeave: () => {
            setHoveredMiniSidebarItemId(null);
          }
        } : {}),
        sx: {
          py: 0,
          px: 1,
          overflowX: 'hidden'
        },
        children: [/*#__PURE__*/_jsxs(NavigationListItemButton, {
          selected: isSelected,
          sx: {
            px: 1.4,
            height: isMini ? 60 : 48
          },
          ...(navigationItem.children && !isMini ? {
            onClick: handleOpenFolderClick(navigationItemId)
          } : {}),
          ...(!navigationItem.children ? {
            LinkComponent: Link,
            href: navigationItemFullPath,
            onClick: onLinkClick
          } : {}),
          children: [navigationItem.icon || isMini ? /*#__PURE__*/_jsxs(Box, {
            sx: {
              position: 'relative',
              top: isMini ? -6 : 0,
              left: isMini ? 5 : 0
            },
            children: [/*#__PURE__*/_jsxs(ListItemIcon, {
              sx: {
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                minWidth: listItemIconSize
              },
              children: [navigationItem.icon ?? null, !navigationItem.icon && isMini ? /*#__PURE__*/_jsx(Avatar, {
                sx: {
                  width: listItemIconSize - 7,
                  height: listItemIconSize - 7,
                  fontSize: 12,
                  ml: '-2px'
                },
                children: navigationItemTitle.split(' ').slice(0, 2).map(itemTitleWord => itemTitleWord.charAt(0).toUpperCase())
              }) : null]
            }), isMini ? /*#__PURE__*/_jsx(Typography, {
              variant: "caption",
              sx: {
                position: 'absolute',
                bottom: -18,
                left: '50%',
                transform: 'translateX(-50%)',
                fontSize: 10,
                fontWeight: 500,
                textAlign: 'center',
                whiteSpace: 'nowrap',
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                width: MINI_DRAWER_WIDTH - 28
              },
              children: navigationItemTitle
            }) : null]
          }) : null, !isMini ? /*#__PURE__*/_jsx(ListItemText, {
            primary: navigationItemTitle,
            sx: {
              ml: 1.2,
              whiteSpace: 'nowrap',
              zIndex: 1
            }
          }) : null, navigationItem.action && !isMini && isFullyExpanded ? navigationItem.action : null, navigationItem.children ? /*#__PURE__*/_jsx(ExpandMoreIcon, {
            sx: nestedNavigationCollapseSx
          }) : null]
        }), navigationItem.children && isMini ? /*#__PURE__*/_jsx(Grow, {
          in: navigationItemId === hoveredMiniSidebarItemId,
          children: /*#__PURE__*/_jsx(Box, {
            sx: {
              position: 'fixed',
              left: MINI_DRAWER_WIDTH - 2,
              pl: '6px'
            },
            children: /*#__PURE__*/_jsx(Paper, {
              sx: {
                pt: 0.5,
                pb: 0.5,
                transform: 'translateY(calc(50% - 30px))'
              },
              children: /*#__PURE__*/_jsx(DashboardSidebarSubNavigation, {
                subNavigation: navigationItem.children,
                depth: depth + 1,
                onLinkClick: onLinkClick,
                isPopover: true
              })
            })
          })
        }) : null]
      });
      return /*#__PURE__*/_jsxs(React.Fragment, {
        children: [listItem, navigationItem.children && !isMini ? /*#__PURE__*/_jsx(Collapse, {
          in: isNestedNavigationExpanded,
          timeout: "auto",
          unmountOnExit: true,
          children: /*#__PURE__*/_jsx(DashboardSidebarSubNavigation, {
            subNavigation: navigationItem.children,
            depth: depth + 1,
            onLinkClick: onLinkClick,
            isPopover: isPopover
          })
        }) : null]
      }, navigationItemId);
    })
  });
}
export { DashboardSidebarSubNavigation };